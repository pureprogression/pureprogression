/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * –ó–∞–ø—É—Å–∫: node optimize-mobile-videos.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üì± –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n');

const videosDir = './public/videos/';
const outputDir = './public/videos/mobile/';

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const videosToOptimize = [
  'webHeroAuth.mp4',
  'work60.mp4',
  'x51.mp4',
  'x51web.mp4',
  'x93.mp4'
];

console.log('üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–∏–¥–µ–æ:');
videosToOptimize.forEach(video => {
  const inputPath = path.join(videosDir, video);
  if (fs.existsSync(inputPath)) {
    const stats = fs.statSync(inputPath);
    const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
    console.log(`  ${video}: ${sizeMB}MB`);
  } else {
    console.log(`  ‚ùå ${video}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

console.log('\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n');

videosToOptimize.forEach(video => {
  const inputPath = path.join(videosDir, video);
  const outputPath = path.join(outputDir, video);
  
  if (fs.existsSync(inputPath)) {
    console.log(`# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ${video}:`);
    console.log(`ffmpeg -i "${inputPath}" -vf scale=640:360 -c:v libx264 -b:v 600k -c:a aac -b:a 64k -movflags +faststart "${outputPath}"`);
    console.log('');
  }
});

console.log('üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log('- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: 200-500KB (–≤–º–µ—Å—Ç–æ 1-3MB)');
console.log('- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 640x360 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)');
console.log('- –ë–∏—Ç—Ä–µ–π—Ç: 600kbps (–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)');
console.log('- –ê—É–¥–∏–æ: 64kbps (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ñ–æ–Ω–∞)');

console.log('\nüöÄ –ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
console.log('1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ R2');
console.log('2. –û–±–Ω–æ–≤–∏—Ç—å Hero –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π');
console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω)
console.log('\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:');
try {
  execSync('ffmpeg -version', { stdio: 'ignore' });
  console.log('‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...\n');
  
  videosToOptimize.forEach(video => {
    const inputPath = path.join(videosDir, video);
    const outputPath = path.join(outputDir, video);
    
    if (fs.existsSync(inputPath)) {
      try {
        console.log(`üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º ${video}...`);
        const command = `ffmpeg -i "${inputPath}" -vf scale=640:360 -c:v libx264 -b:v 600k -c:a aac -b:a 64k -movflags +faststart "${outputPath}"`;
        execSync(command, { stdio: 'inherit' });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (fs.existsSync(outputPath)) {
          const originalSize = fs.statSync(inputPath).size;
          const optimizedSize = fs.statSync(outputPath).size;
          const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
          
          console.log(`‚úÖ ${video}: ${(originalSize/1024/1024).toFixed(2)}MB ‚Üí ${(optimizedSize/1024/1024).toFixed(2)}MB (${reduction}% –º–µ–Ω—å—à–µ)`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${video}:`, error.message);
      }
    }
  });
  
  console.log('\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìÅ –ú–æ–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', outputDir);
  
} catch (error) {
  console.log('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.');
  console.log('üí° –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é (—Å–º. –≤—ã—à–µ).');
}
