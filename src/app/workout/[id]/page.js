"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { auth, db } from "@/lib/firebase";
import { doc, getDoc, collection, addDoc, serverTimestamp } from "firebase/firestore";
import Navigation from "@/components/Navigation";
import WorkoutExecution from "@/components/WorkoutExecution";

export default function WorkoutPage() {
  const params = useParams();
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [workout, setWorkout] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (u) => {
      setUser(u);
      
      if (u && params.id) {
        console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å ID:", params.id);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage (–∫—ç—à)
        const cachedWorkout = localStorage.getItem(`workout_${params.id}`);
        if (cachedWorkout) {
          try {
            const workoutData = JSON.parse(cachedWorkout);
            console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞:", workoutData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (workoutData.userId === u.uid) {
              console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–≥—Ä—É–∂–∞–µ–º");
              setWorkout(workoutData);
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫—ç—à–∞:", error);
          }
        }
        
        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ Firebase
          console.log("üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:", `workouts/${params.id}`);
          console.log("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", {
            uid: u.uid,
            email: u.email,
            emailVerified: u.emailVerified
          });
          
          const workoutDoc = await getDoc(doc(db, 'workouts', params.id));
          console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç getDoc:", {
            exists: workoutDoc.exists(),
            id: workoutDoc.id,
            data: workoutDoc.exists() ? workoutDoc.data() : null
          });
          
          if (workoutDoc.exists()) {
            const workoutData = {
              id: workoutDoc.id,
              ...workoutDoc.data()
            };
            console.log("–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", workoutData);
            console.log("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", u.uid);
            console.log("ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", workoutData.userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (workoutData.userId === u.uid) {
              console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º");
              
              // –ö—ç—à–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
              localStorage.setItem(`workout_${params.id}`, JSON.stringify(workoutData));
              console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à");
              
              setWorkout(workoutData);
            } else {
              console.error("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
              alert("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ");
              router.push('/my-workouts');
            }
          } else {
            console.error("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Firebase");
            console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...");
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ workouts –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            try {
              const testQuery = collection(db, 'workouts');
              console.log("üîç –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ workouts: OK");
            } catch (testError) {
              console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ workouts:", testError);
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (cachedWorkout) {
              console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É");
              const workoutData = JSON.parse(cachedWorkout);
              setWorkout(workoutData);
            } else {
              alert("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞");
              router.push('/my-workouts');
            }
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", error);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (cachedWorkout) {
            console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏");
            const workoutData = JSON.parse(cachedWorkout);
            setWorkout(workoutData);
          } else {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: " + error.message);
            router.push('/my-workouts');
          }
        }
      }
      
      setIsLoading(false);
    });

    return () => unsubscribe();
  }, [params.id, router]);

  const handleCompleteWorkout = async (workoutResults) => {
    if (!user || !workout) return;
    
    setIsSaving(true);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const historyData = {
        userId: user.uid,
        userEmail: user.email,
        workoutId: workout.id,
        workoutName: workout.name,
        completedAt: serverTimestamp(),
        exercises: workoutResults.exercises,
      };

      await addDoc(collection(db, 'workoutHistory'), historyData);
      
      console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é");
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
      router.push('/my-workouts');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancelWorkout = () => {
    router.push('/my-workouts');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...</div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</div>
      </div>
    );
  }

  if (!workout) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>
      </div>
    );
  }

  return (
    <>
      <Navigation currentPage="workout-execution" user={user} />
      <WorkoutExecution 
        workout={workout}
        onComplete={handleCompleteWorkout}
        onCancel={handleCancelWorkout}
        isSaving={isSaving}
      />
    </>
  );
}
