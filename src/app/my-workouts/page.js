"use client";

import { useEffect, useState } from "react";
import { auth, db } from "@/lib/firebase";
import { collection, onSnapshot, query, where } from "firebase/firestore";
import Navigation from "@/components/Navigation";
import WorkoutsList from "@/components/WorkoutsList";

export default function MyWorkoutsPage() {
  const [user, setUser] = useState(null);
  const [workouts, setWorkouts] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
  const handleWorkoutDeleted = (deletedWorkoutId) => {
    console.log("üî• –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", deletedWorkoutId);
    setWorkouts(prevWorkouts => {
      if (!prevWorkouts) return prevWorkouts;
      return prevWorkouts.filter(workout => workout.id !== deletedWorkoutId);
    });
  };

  useEffect(() => {
    let unsubscribe = null;
    
    const unsubscribeAuth = auth.onAuthStateChanged((u) => {
      if (u) {
        setUser(u);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        const workoutsQuery = query(
          collection(db, "workouts"),
          where("userId", "==", u.uid)
        );
        unsubscribe = onSnapshot(workoutsQuery, (snapshot) => {
          const items = snapshot.docs.map((d) => ({
            id: d.id,
            ...d.data(),
          }));
          console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", items);
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
          const validWorkouts = items.filter(workout => 
            workout.exercises && 
            Array.isArray(workout.exercises) && 
            workout.exercises.length > 0
          );
          
          console.log("–í–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", validWorkouts);
          
          // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
          validWorkouts.forEach(workout => {
            try {
              localStorage.setItem(`workout_${workout.id}`, JSON.stringify(workout));
              console.log(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${workout.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à`);
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${workout.id}:`, error);
            }
          });
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
          validWorkouts.sort((a, b) => {
            const dateA = a.createdAt?.toDate ? a.createdAt.toDate() : new Date(a.createdAt);
            const dateB = b.createdAt?.toDate ? b.createdAt.toDate() : new Date(b.createdAt);
            return dateB - dateA;
          });
          setWorkouts(validWorkouts);
        });
      } else {
        setUser(null);
        setWorkouts(null);
        if (unsubscribe) unsubscribe();
      }
    });

    return () => {
      if (unsubscribe) unsubscribe();
      unsubscribeAuth();
    };
  }, []);

  if (!user)
    return <p className="text-center mt-10">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</p>;
  if (workouts === null)
    return <p className="text-center mt-10">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

  return (
    <>
      <Navigation currentPage="my-workouts" user={user} />
      <div className="max-w-[1200px] mx-auto p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold">–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h2>
        </div>
              <WorkoutsList workouts={workouts} user={user} onWorkoutDeleted={handleWorkoutDeleted} />
      </div>
    </>
  );
}
