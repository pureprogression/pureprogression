"use client";

import { useState, useEffect } from "react";

export default function WorkoutExecution({ workout, onComplete, onCancel, isSaving }) {
  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);
  const [workoutResults, setWorkoutResults] = useState({
    exercises: []
  });
  const [startTime, setStartTime] = useState(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingSets, setEditingSets] = useState([]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  useEffect(() => {
    if (workout && workout.exercises) {
      const initialResults = {
        exercises: workout.exercises.map(exercise => ({
          ...exercise,
          completedSets: 0,
          sets: exercise.sets || 3,
          reps: exercise.reps || 12
        }))
      };
      setWorkoutResults(initialResults);
      setStartTime(Date.now());
    }
  }, [workout]);

  const currentExercise = workoutResults.exercises[currentExerciseIndex];
  const progress = ((currentExerciseIndex + 1) / workoutResults.exercises.length) * 100;

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!currentExercise) return;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
    const timer = setTimeout(() => {
      const video = document.querySelector('video');
      if (video) {
        video.load();
        video.play().catch(console.error);
      }
    }, 100);

    return () => clearTimeout(timer);
  }, [currentExerciseIndex, currentExercise]);

      const handleCompleteExercise = () => {
        if (!currentExercise) return;

        const updatedResults = { ...workoutResults };
        const exercise = updatedResults.exercises[currentExerciseIndex];
        
        // –û—Ç–º–µ—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        exercise.actualSets = exercise.sets || 3;
        exercise.actualReps = exercise.reps || 12;
        exercise.completedSets = exercise.sets || 3;
        
        setWorkoutResults(updatedResults);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        if (currentExerciseIndex < workoutResults.exercises.length - 1) {
          setCurrentExerciseIndex(currentExerciseIndex + 1);
        } else {
          handleCompleteWorkout();
        }
      };

  const handleCompleteWorkout = () => {
    const finalResults = {
      ...workoutResults
    };
    
    setIsCompleted(true);
    onComplete(finalResults);
  };

  const handleEditSets = () => {
    const currentSets = currentExercise.sets || 3;
    const currentReps = currentExercise.reps || 12;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const sets = Array.from({ length: currentSets }, (_, i) => ({
      setNumber: i + 1,
      reps: currentReps
    }));
    
    setEditingSets(sets);
    setShowEditModal(true);
  };

  const handleUpdateSet = (setIndex, newReps) => {
    const updatedSets = [...editingSets];
    updatedSets[setIndex].reps = parseInt(newReps) || 0;
    setEditingSets(updatedSets);
  };

  const handleSaveEditedSets = () => {
    const updatedResults = { ...workoutResults };
    const exercise = updatedResults.exercises[currentExerciseIndex];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
    exercise.actualSets = editingSets.length;
    exercise.actualReps = editingSets.reduce((sum, set) => sum + set.reps, 0);
    exercise.completedSets = editingSets.length;
    exercise.setsData = editingSets; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ö–æ–¥–∞—Ö
    
    setWorkoutResults(updatedResults);
    setShowEditModal(false);
  };

  if (isCompleted) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center text-white">
          <div className="text-3xl font-bold mb-4">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ</div>
          <div className="text-gray-400 mb-6">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</div>
          <div className="animate-spin w-8 h-8 border-2 border-white border-t-transparent rounded-full mx-auto"></div>
        </div>
      </div>
    );
  }

  if (!currentExercise) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* –ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ - –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–µ–Ω—é */}
      <button
        onClick={onCancel}
        className="fixed top-4 right-4 z-50 p-3 text-white hover:bg-white/10 transition-all duration-300 ease-out focus:outline-none rounded-lg"
        aria-label="–í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
      >
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

          {/* –í–∏–¥–µ–æ –Ω–∞ –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–≤–µ—Ä—Ö */}
          <div className="relative">
            <video
              key={`${currentExerciseIndex}-${currentExercise.id}`}
              className="w-full h-[100vh] object-cover"
              autoPlay
              muted
              loop
              playsInline
            >
              <source src={`/${currentExercise.video}`} type="video/mp4" />
            </video>
            
            {/* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö –≤–∏–¥–µ–æ */}
            <div className="absolute bottom-16 left-0 right-0 p-6">
              <div className="flex items-center justify-between">
                <div className="text-white">
                  {/* –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è */}
                  <h2 className="text-2xl md:text-3xl font-bold mb-2 drop-shadow-lg">
                    {currentExercise.title}
                  </h2>
                  
                  {/* –ü—Ä–æ—Å—Ç—ã–µ —Ü–∏—Ñ—Ä—ã —Å –∏–∫–æ–Ω–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                  <div className="flex items-center space-x-3 text-lg font-medium drop-shadow-lg opacity-90">
                    <span>{currentExercise.sets || 3}</span>
                    <span>‚Ä¢</span>
                    <span>{currentExercise.reps || 12}</span>
                    <button
                      onClick={handleEditSets}
                      className="ml-2 p-1 hover:bg-white/10 rounded-full transition-all duration-200 hover:scale-110"
                      aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã"
                    >
                      <svg className="w-4 h-4 text-white/70 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </button>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è */}
                <button
                  onClick={handleCompleteExercise}
                  className="group flex items-center justify-center w-12 h-12 hover:bg-white/10 rounded-full transition-all duration-300 ease-out hover:scale-110 active:scale-95 relative z-10 cursor-pointer"
                  aria-label="–ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
                  style={{ pointerEvents: 'auto' }}
                >
                  <svg className="w-5 h-5 text-white drop-shadow-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å–∞–º–æ–º –Ω–∏–∑—É */}
            <div className="absolute bottom-4 left-4 right-4">
              <div className="w-full bg-white/20 rounded-full h-1">
                <div 
                  className="bg-white h-1 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
            </div>
            
            {/* –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ */}
            <div className="absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-black/60 to-transparent pointer-events-none"></div>
          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥–æ–≤ */}
          {showEditModal && (
            <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 w-full max-w-md border border-white/20">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-white text-xl font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã</h3>
                  <button
                    onClick={() => setShowEditModal(false)}
                    className="text-white/70 hover:text-white transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <div className="space-y-3 mb-6">
                  {editingSets.map((set, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <span className="text-white/90 text-sm">–ü–æ–¥—Ö–æ–¥ {set.setNumber}</span>
                      <div className="flex items-center space-x-2">
                        <input
                          type="number"
                          value={set.reps}
                          onChange={(e) => handleUpdateSet(index, e.target.value)}
                          className="w-20 px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white text-center focus:outline-none focus:border-white/40 transition-colors"
                          min="0"
                          max="999"
                        />
                        <span className="text-white/70 text-sm">–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</span>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="flex space-x-3">
                  <button
                    onClick={() => setShowEditModal(false)}
                    className="flex-1 py-3 px-4 bg-white/10 text-white rounded-lg font-medium hover:bg-white/20 transition-colors"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={handleSaveEditedSets}
                    className="flex-1 py-3 px-4 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors"
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          )}

        </div>
      );
    }