/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç CDN —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–∞
 * –ó–∞–ø—É—Å–∫: node interactive-cdn-test.js
 */

const https = require('https');
const readline = require('readline');

const R2_URL = "https://pub-24028780ba564e299106a5335d66f54c.r2.dev";
const TEST_VIDEO = "/videos/webHero.mp4";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function testCDN(url) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    const req = https.get(url + TEST_VIDEO, (res) => {
      let dataSize = 0;
      
      res.on('data', (chunk) => {
        dataSize += chunk.length;
      });
      
      res.on('end', () => {
        const loadTime = Date.now() - startTime;
        resolve({
          url,
          status: res.statusCode,
          loadTime,
          dataSize,
          speed: (dataSize / 1024 / 1024) / (loadTime / 1000),
          headers: {
            'cf-cache-status': res.headers['cf-cache-status'],
            'cf-ray': res.headers['cf-ray'],
            'server': res.headers['server']
          },
          working: res.statusCode === 200
        });
      });
    });
    
    req.on('error', (error) => {
      resolve({
        url,
        status: 'ERROR',
        error: error.message,
        working: false
      });
    });
    
    req.setTimeout(5000, () => {
      req.destroy();
      resolve({
        url,
        status: 'TIMEOUT',
        error: 'Request timeout',
        working: false
      });
    });
  });
}

async function testR2Baseline() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ R2 (–±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è)...');
  const result = await testCDN(R2_URL);
  
  if (result.working) {
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${result.loadTime}ms`);
    console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${result.speed.toFixed(2)}MB/s`);
    console.log(`   üì¶ –†–∞–∑–º–µ—Ä: ${(result.dataSize / 1024 / 1024).toFixed(2)}MB\n`);
    return result;
  } else {
    console.log(`   ‚ùå R2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${result.error}\n`);
    return null;
  }
}

async function testCustomCDN(cdnUrl) {
  console.log(`üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CDN: ${cdnUrl}`);
  const result = await testCDN(cdnUrl);
  
  if (result.working) {
    console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç! (${result.status})`);
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${result.loadTime}ms`);
    console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${result.speed.toFixed(2)}MB/s`);
    
    if (result.headers['cf-cache-status']) {
      console.log(`   üóÑÔ∏è  –ö–µ—à: ${result.headers['cf-cache-status']}`);
    }
    if (result.headers['cf-ray']) {
      console.log(`   üåê CF-Ray: ${result.headers['cf-ray']}`);
    }
    
    return result;
  } else {
    console.log(`   ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${result.status})`);
    if (result.error) {
      console.log(`   üí° ${result.error}`);
    }
    return null;
  }
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function main() {
  console.log('üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç CDN\n');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º R2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const r2Result = await testR2Baseline();
  
  if (!r2Result) {
    console.log('‚ùå R2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    rl.close();
    return;
  }
  
  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º CDN URL
  const cdnUrl = await askQuestion('üåç –í–≤–µ–¥–∏—Ç–µ CDN URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://cdn.pureprogression.com): ');
  
  if (!cdnUrl) {
    console.log('‚ùå CDN URL –Ω–µ —É–∫–∞–∑–∞–Ω.');
    rl.close();
    return;
  }
  
  console.log();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º CDN
  const cdnResult = await testCustomCDN(cdnUrl);
  
  if (cdnResult) {
    const improvement = ((r2Result.loadTime - cdnResult.loadTime) / r2Result.loadTime * 100).toFixed(1);
    const speedImprovement = ((cdnResult.speed - r2Result.speed) / r2Result.speed * 100).toFixed(1);
    
    console.log('\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log(`   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${improvement}%`);
    console.log(`   üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: ${speedImprovement}%`);
    
    if (parseFloat(improvement) > 0) {
      console.log('   üéâ CDN —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ!');
      console.log('\nüìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤ src/data/exercises.js:');
      console.log(`   const R2_CDN_URL = "${cdnUrl}";`);
    } else {
      console.log('   ‚ö†Ô∏è  CDN –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } else {
    console.log('\nüí° CDN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. Custom Domain –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Cloudflare');
    console.log('   2. DNS –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª—Å—è (–ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç)');
    console.log('   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–æ–º–µ–Ω–∞');
  }
  
  rl.close();
}

main().catch(console.error);


