/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Cloudflare API –∏ R2
 * –ó–∞–ø—É—Å–∫: node check-cloudflare-access.js
 */

const https = require('https');

async function checkCloudflareAPI() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Cloudflare...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudflare API
  const apiCheck = new Promise((resolve) => {
    const req = https.get('https://api.cloudflare.com/client/v4/zones', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      }
    }, (res) => {
      resolve({
        status: res.statusCode,
        accessible: res.statusCode === 200 || res.statusCode === 401 // 401 = API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      });
    });
    
    req.on('error', () => {
      resolve({ status: 'ERROR', accessible: false });
    });
    
    req.setTimeout(3000, () => {
      req.destroy();
      resolve({ status: 'TIMEOUT', accessible: false });
    });
  });
  
  const result = await apiCheck;
  
  if (result.accessible) {
    console.log('‚úÖ Cloudflare API –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üåê –ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ CDN —á–µ—Ä–µ–∑ Dashboard');
  } else {
    console.log('‚ùå Cloudflare API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
  }
  
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û—Ç–∫—Ä—ã—Ç—å: https://dash.cloudflare.com/');
  console.log('2. –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Cloudflare');
  console.log('3. –ü–µ—Ä–µ–π—Ç–∏ –≤ R2 Object Storage');
  console.log('4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Custom Domain –¥–ª—è CDN');
  
  return result.accessible;
}

checkCloudflareAPI().catch(console.error);


