/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–æ–≤ pureprogression.com –∏ pureprogression.ru
 * –ó–∞–ø—É—Å–∫: node check-domain-status.js
 */

const https = require('https');

async function checkDomain(domain) {
  return new Promise((resolve) => {
    const req = https.get(`https://${domain}`, (res) => {
      resolve({
        domain,
        status: res.statusCode,
        accessible: res.statusCode === 200 || res.statusCode === 301 || res.statusCode === 302,
        headers: {
          'server': res.headers['server'],
          'location': res.headers['location'],
          'x-powered-by': res.headers['x-powered-by']
        }
      });
    });
    
    req.on('error', (error) => {
      resolve({
        domain,
        status: 'ERROR',
        error: error.message,
        accessible: false
      });
    });
    
    req.setTimeout(5000, () => {
      req.destroy();
      resolve({
        domain,
        status: 'TIMEOUT',
        error: 'Request timeout',
        accessible: false
      });
    });
  });
}

async function checkBothDomains() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–æ–≤...\n');
  
  const domains = ['pureprogression.com', 'pureprogression.ru'];
  const results = [];
  
  for (const domain of domains) {
    console.log(`üåê –ü—Ä–æ–≤–µ—Ä—è—é: ${domain}`);
    const result = await checkDomain(domain);
    results.push(result);
    
    if (result.accessible) {
      console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (${result.status})`);
      if (result.headers.server) {
        console.log(`   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${result.headers.server}`);
      }
      if (result.headers.location) {
        console.log(`   üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç: ${result.headers.location}`);
      }
    } else {
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${result.status})`);
      if (result.error) {
        console.log(`   üí° ${result.error}`);
      }
    }
    console.log();
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏:');
  
  const comResult = results.find(r => r.domain === 'pureprogression.com');
  const ruResult = results.find(r => r.domain === 'pureprogression.ru');
  
  if (comResult.accessible) {
    console.log('‚úÖ pureprogression.com - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–º–µ–Ω –≤—Å–µ –µ—â–µ –≤–∞—à, –Ω–æ –Ω–µ –≤ Cloudflare');
  } else {
    console.log('‚ùå pureprogression.com - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   üí° –î–æ–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—Ä–æ–¥–ª–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à');
  }
  
  if (ruResult.accessible) {
    console.log('‚úÖ pureprogression.ru - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   üí° –ù–∞ –Ω–µ–º –≤–∏—Å–∏—Ç —Å—Ç–∞—Ä—ã–π —Å–∞–π—Ç');
  } else {
    console.log('‚ùå pureprogression.ru - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS');
  }
  
  console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  
  if (comResult.accessible) {
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ pureprogression.com —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('2. –ï—Å–ª–∏ –¥–æ–º–µ–Ω –≤–∞—à - –¥–æ–±–∞–≤–∏—Ç—å –≤ Cloudflare');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CDN: cdn.pureprogression.com');
  } else if (ruResult.accessible) {
    console.log('1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pureprogression.ru –¥–ª—è CDN');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –≤ Cloudflare');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CDN: cdn.pureprogression.ru');
  } else {
    console.log('1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω');
    console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å R2.dev –¥–æ–º–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ');
  }
}

checkBothDomains().catch(console.error);


