/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CDN vs R2
 * –ó–∞–ø—É—Å–∫: node test-cdn-performance.js
 */

const https = require('https');

const R2_URL = "https://pub-24028780ba564e299106a5335d66f54c.r2.dev";
const CDN_URL = "https://cdn.pureprogression.com"; // –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const TEST_VIDEO = "/videos/webHero.mp4";

function measureLoadTime(url) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    https.get(url, (res) => {
      let dataSize = 0;
      
      res.on('data', (chunk) => {
        dataSize += chunk.length;
      });
      
      res.on('end', () => {
        const loadTime = Date.now() - startTime;
        resolve({
          url,
          loadTime,
          dataSize,
          speed: (dataSize / 1024 / 1024) / (loadTime / 1000),
          headers: {
            'cf-cache-status': res.headers['cf-cache-status'],
            'cf-ray': res.headers['cf-ray'],
            'server': res.headers['server']
          }
        });
      });
      
    }).on('error', reject);
  });
}

async function testBothSources() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ R2 vs CDN –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');
  
  const results = {};
  
  // –¢–µ—Å—Ç R2 (—Ç–µ–∫—É—â–∏–π)
  console.log('üìπ –¢–µ—Å—Ç–∏—Ä—É—é R2 (—Ç–µ–∫—É—â–∏–π):');
  try {
    results.r2 = await measureLoadTime(R2_URL + TEST_VIDEO);
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${results.r2.loadTime}ms`);
    console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${results.r2.speed.toFixed(2)}MB/s`);
    console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(results.r2.dataSize / 1024 / 1024).toFixed(2)}MB\n`);
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ R2: ${error.message}\n`);
  }
  
  // –¢–µ—Å—Ç CDN (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
  console.log('üåç –¢–µ—Å—Ç–∏—Ä—É—é CDN (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏):');
  try {
    results.cdn = await measureLoadTime(CDN_URL + TEST_VIDEO);
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${results.cdn.loadTime}ms`);
    console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${results.cdn.speed.toFixed(2)}MB/s`);
    console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(results.cdn.dataSize / 1024 / 1024).toFixed(2)}MB`);
    
    // Cloudflare –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (results.cdn.headers['cf-cache-status']) {
      console.log(`   üóÑÔ∏è  –ö–µ—à —Å—Ç–∞—Ç—É—Å: ${results.cdn.headers['cf-cache-status']}`);
    }
    if (results.cdn.headers['cf-ray']) {
      console.log(`   üåê CF-Ray: ${results.cdn.headers['cf-ray']}`);
    }
    console.log();
    
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ CDN: ${error.message}`);
    console.log('   üí° CDN –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n');
  }
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (results.r2 && results.cdn) {
    const improvement = ((results.r2.loadTime - results.cdn.loadTime) / results.r2.loadTime * 100).toFixed(1);
    const speedImprovement = ((results.cdn.speed - results.r2.speed) / results.r2.speed * 100).toFixed(1);
    
    console.log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log(`   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${improvement}%`);
    console.log(`   üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: ${speedImprovement}%`);
    
    if (parseFloat(improvement) > 0) {
      console.log('   üéâ CDN —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ!');
    } else {
      console.log('   ‚ö†Ô∏è  CDN –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  } else if (results.r2) {
    console.log('üìä –¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å R2:');
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${results.r2.loadTime}ms`);
    console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${results.r2.speed.toFixed(2)}MB/s`);
    console.log('   üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CDN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  }
}

testBothSources().catch(console.error);


