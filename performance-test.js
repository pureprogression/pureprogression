/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
 * –ó–∞–ø—É—Å–∫: node performance-test.js
 */

const https = require('https');
const fs = require('fs');

const R2_URL = "https://pub-24028780ba564e299106a5335d66f54c.r2.dev";
const TEST_VIDEOS = [
  '/videos/webHero.mp4',
  '/videos/x92.mp4', 
  '/videos/x93.mp4'
];

function measureLoadTime(url) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    https.get(url, (res) => {
      let dataSize = 0;
      
      res.on('data', (chunk) => {
        dataSize += chunk.length;
      });
      
      res.on('end', () => {
        const loadTime = Date.now() - startTime;
        resolve({
          url,
          loadTime,
          dataSize,
          speed: (dataSize / 1024 / 1024) / (loadTime / 1000) // MB/s
        });
      });
      
    }).on('error', reject);
  });
}

async function runPerformanceTest() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ...\n');
  
  const results = [];
  
  for (const video of TEST_VIDEOS) {
    const url = R2_URL + video;
    console.log(`üìπ –¢–µ—Å—Ç–∏—Ä—É—é: ${video}`);
    
    try {
      const result = await measureLoadTime(url);
      results.push(result);
      
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${result.loadTime}ms`);
      console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(result.dataSize / 1024 / 1024).toFixed(2)}MB`);
      console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${result.speed.toFixed(2)}MB/s\n`);
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
    }
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  if (results.length > 0) {
    const avgLoadTime = results.reduce((sum, r) => sum + r.loadTime, 0) / results.length;
    const avgSpeed = results.reduce((sum, r) => sum + r.speed, 0) / results.length;
    
    console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${avgLoadTime.toFixed(0)}ms`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${avgSpeed.toFixed(2)}MB/s`);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (avgLoadTime > 3000) {
      console.log('   ‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–∞—è (>3—Å) - –Ω—É–∂–µ–Ω CDN');
    }
    if (avgSpeed < 1) {
      console.log('   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (<1MB/s) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
    if (avgLoadTime < 1500 && avgSpeed > 2) {
      console.log('   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runPerformanceTest().catch(console.error);


