/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞
 * –ó–∞–ø—É—Å–∫: node check-site-domains.js
 */

const https = require('https');

const POSSIBLE_DOMAINS = [
  'pureprogression.vercel.app',
  'purep-fitness.vercel.app', 
  'pureprogression.ru',
  'pure-progression.ru',
  'pub-24028780ba564e299106a5335d66f54c.r2.dev'
];

function checkDomain(domain) {
  return new Promise((resolve) => {
    const req = https.get(`https://${domain}`, (res) => {
      resolve({
        domain,
        status: res.statusCode,
        accessible: res.statusCode === 200,
        headers: {
          'server': res.headers['server'],
          'x-vercel-id': res.headers['x-vercel-id'],
          'location': res.headers['location']
        }
      });
    });
    
    req.on('error', (error) => {
      resolve({
        domain,
        status: 'ERROR',
        error: error.message,
        accessible: false
      });
    });
    
    req.setTimeout(3000, () => {
      req.destroy();
      resolve({
        domain,
        status: 'TIMEOUT',
        error: 'Request timeout',
        accessible: false
      });
    });
  });
}

async function checkAllDomains() {
  console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞...\n');
  
  const results = [];
  
  for (const domain of POSSIBLE_DOMAINS) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é: ${domain}`);
    const result = await checkDomain(domain);
    results.push(result);
    
    if (result.accessible) {
      console.log(`   ‚úÖ –î–û–°–¢–£–ü–ï–ù (${result.status})`);
      
      if (result.headers['x-vercel-id']) {
        console.log(`   üöÄ Vercel –¥–µ–ø–ª–æ–π: ${result.headers['x-vercel-id']}`);
      }
      
      if (result.headers.server) {
        console.log(`   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${result.headers.server}`);
      }
      
      console.log(`   üì± –û—Ç–∫—Ä—ã—Ç—å: https://${domain}`);
    } else {
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${result.status})`);
      if (result.error) {
        console.log(`   üí° ${result.error}`);
      }
    }
    console.log();
  }
  
  // –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –¥–æ–º–µ–Ω—ã
  const workingDomains = results.filter(r => r.accessible);
  
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
  
  if (workingDomains.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workingDomains.length} —Ä–∞–±–æ—á–∏—Ö –¥–æ–º–µ–Ω–æ–≤:`);
    workingDomains.forEach(result => {
      console.log(`   üåê https://${result.domain}`);
    });
    
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:');
    const vercelDomain = workingDomains.find(r => r.domain.includes('vercel.app'));
    if (vercelDomain) {
      console.log(`   üöÄ https://${vercelDomain.domain} (Vercel)`);
    } else {
      console.log(`   üåê https://${workingDomains[0].domain}`);
    }
  } else {
    console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –¥–æ–º–µ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –°–∞–π—Ç –Ω–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω');
    console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å DNS');
    console.log('   - –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  console.log('\nüìù –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ:');
  console.log('   üé¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å: https://pub-24028780ba564e299106a5335d66f54c.r2.dev');
  console.log('   üìä –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: 1037ms');
}

checkAllDomains().catch(console.error);


